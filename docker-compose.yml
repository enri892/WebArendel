# docker-compose.yml para producci√≥n
services:
  # Backend Spring Boot
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: arendel-backend
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-production}
      # SendGrid configuration
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      EMAIL_FROM: ${EMAIL_FROM}
      RECIPIENT_EMAIL: ${RECIPIENT_EMAIL}
      
      #SMTP de Gmail - ya no lo usamos
      #EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      SERVER_PORT: 8080
      JAVA_OPTS: ${JAVA_OPTS:--Xmx1g -Xms512m}
    ports:
      - "127.0.0.1:8080:8080"
    volumes:
      - cv_uploads:/app/uploads/cv
      - app_logs:/app/logs
    networks:
      - arendel-network
    restart: unless-stopped
    healthcheck:
      # Health check elegante usando curl al endpoint que creaste
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend Nginx + React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL}
        VITE_APP_ENV: ${VITE_APP_ENV:-production}
        VITE_QR_REDIRECT_URL: ${VITE_QR_REDIRECT_URL}
    container_name: arendel-frontend
    environment:
      API_URL: http://backend:8080
    ports:
      - "127.0.0.1:3000:80"
    networks:
      - arendel-network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      # Health check del frontend al endpoint root
      test: ["CMD", "curl", "-f", "http://localhost/", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  arendel-network:
    driver: bridge
    name: arendel-network

volumes:
  cv_uploads:
    name: arendel-cv-uploads
  app_logs:
    name: arendel-app-logs
